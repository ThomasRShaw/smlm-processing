function [Iall, var] = calibrate_scmos(Iall, specs, timestamp)
% [IALL, VAR] = CALIBRATE_SCMOS(IALL, SPECS, TIMESTAMP)

% Copyright (C) 2023 Thomas Shaw and Sarah Veatch
% This file is part of SMLM PROCESSING 
% SMLM PROCESSING is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% SMLM PROCESSING is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% You should have received a copy of the GNU General Public License
% along with SMLM PROCESSING.  If not, see <https://www.gnu.org/licenses/>

% In this case specs has fields:
% offset % *Image* of offset counts
% darkcurrent % *Image* of counts/sec
% dark_cutoff_exposure % scalar exposure (in sec) above which dark current
                        % correction should be applied
% gain % *Image* of counts/photon
% var % *Image* of counts^2 (or photo-e-^2?)

% NOTICE: Andor's convention is the opposite of MATLAB's, so the Width is in y
% (i.e. first dim of array), and the height is in x (i.e. second dim).
xinds = timestamp.AOITop + (1:timestamp.AOIHeight) - 1;
yinds = timestamp.AOILeft + (1:timestamp.AOIWidth) - 1;

wI = size(Iall, 2);
hI = size(Iall, 1);
if (numel(yinds) ~= hI) || (numel(xinds) ~= wI)
    error(['calibrate_scmos: dimension mismatch. Iall is ', num2str(wI), 'x', num2str(hI),...
            ', but timestamp reports ', num2str(timestamp.AOIHeight), 'x', ...
            num2str(timestamp.AOIWidth), '.']);
end

offset = specs.offset(yinds,xinds);
exposure = timestamp.exposure;
use_dc = exposure > specs.dark_cutoff_exposure;

if use_dc
    dc = specs.darkcurrent(yinds,xinds) * exposure;
else
    dc = 0;
end

gain = specs.gain(yinds,xinds);
var = specs.var(yinds,xinds)./gain.^2;

% Do the calibration.
% offset is the baseline offset (typically 100 counts)
% sensitivity is the e-/count of the output amplifier (depends on gain
% and shift_speed
% read_noise is the output read noise standard deviation (in e- equivalent)
% it's added here to satisfy the var(signal) == mean(signal) requirement of
% poisson mle fitting
% EM_gain is the gain of the electron multiplication
% the factor of sqrt(2) accounts for the noise generated by electron multiplication
Iall = (double(Iall) - offset - dc) ./ gain;
